#include "GLFontManager.h"
#include "font_si.h"
#include "font_16x16.h"
#include "uvcoord_font_si.h"
#include "uvcoord_font_16x16.h"

// GRIT auto-genrated arrays of images
#include "font_si.h"
#include "font_16x16.h"

// Texture Packer auto-generated UV coords
#include "uvcoord_font_si.h"
#include "uvcoord_font_16x16.h"


// This imageset would use our texture packer generated coords so it's kinda
// safe and easy to use
// FONT_SI_NUM_IMAGES is a value #defined from "uvcoord_font_si.h"
glImage  FontImages[FONT_SI_NUM_IMAGES];
glImage  FontBigImages[FONT_16X16_NUM_IMAGES];

// Initialize the font manager
void GLFontManager::init() {
    // Load our font texture
    font.Load(FontImages,                // pointer to glImage array
              FONT_SI_NUM_IMAGES,       // Texture packer auto-generated #define
              font_si_texcoords,        // Texture packer auto-generated array
              GL_RGB256,                // texture type for glTexImage2D() in videoGL.h
              TEXTURE_SIZE_64,          // sizeX for glTexImage2D() in videoGL.h
              TEXTURE_SIZE_128,         // sizeY for glTexImage2D() in videoGL.h
              GL_TEXTURE_WRAP_S | GL_TEXTURE_WRAP_T | TEXGEN_OFF | GL_TEXTURE_COLOR0_TRANSPARENT, // param for glTexImage2D() in videoGL.h
              256,                      // Length of the palette (256 colors)
              (u16*)font_siPal,         // Palette Data
              (u8*)font_siBitmap);      // image data generated by GRIT

    // Load the big font texture
    fontBig.Load(FontBigImages,
                 FONT_16X16_NUM_IMAGES,
                 font_16x16_texcoords,
                 GL_RGB256,
                 TEXTURE_SIZE_64,
                 TEXTURE_SIZE_512,
                 GL_TEXTURE_WRAP_S | GL_TEXTURE_WRAP_T | TEXGEN_OFF | GL_TEXTURE_COLOR0_TRANSPARENT,
                 256,
                 (u16*)font_siPal,
                 (u8*)font_16x16Bitmap);
}

// Render text using the loaded font
void GLFontManager::renderText(int x, int y, const char* text, bool bigFont) {
    if (bigFont) {
        fontBig.Print(x, y, text);
    } else {
        font.Print(x, y, text);
    }
} 

void GLFontManager::renderTextCentered(int x, int y, const char* text, bool bigFont) {
   if (bigFont) {
        fontBig.PrintCentered(x, y, text);
    } else {
        font.PrintCentered(x, y, text);
    }
}   

