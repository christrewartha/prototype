#ifndef SPRITEMANAGER_H
#define SPRITEMANAGER_H

#include <nds.h>
#include <gl2d.h>
#include <vector>

#include "bandit.h"
static glImage  Bandit[1];

// enum of sprites
// these match the order of the sprites in the vector
// we will write a function that takes a sprite enum and draws the sprite
enum Sprites {
    CLIENT_MALE = 0,
    CLIENT_MALE_DEAD = 1,
    CLIENT_FEMALE = 2,
    CLIENT_FEMALE_DEAD = 3,
    ROBBER = 4,
    ROBBER_DEAD = 5,
    HATGUY = 6,
    HATGUY_DEAD = 7,
    DOOR_OPEN = 8,
    DOOR_HALF_OPEN = 9,
    DOOR_CLOSED = 10,
    GUNSHOT = 11,
    NUM_SPRITES = 12
};

class Sprite {
public:
    Sprite(u16* image) {}


    glImage* getImage() {
        return Image;
    }

private:
    glImage  Image[1];
};

class SpriteManager {
public:
    // Get the singleton instance
    static SpriteManager& getInstance() {
        static SpriteManager instance; // Guaranteed to be destroyed
        return instance;                // Instantiated on first use
    }

    void loadSprites() {
       
        //int BanditTextureID =
		glLoadTileSet( Bandit,			// pointer to glImage array
					   64,				// sprite width
					   128,				// sprite height
					   64,				// bitmap image width
					   128,				// bitmap image height
					   GL_RGB16,		// texture type for glTexImage2D() in videoGL.h
					   TEXTURE_SIZE_64,	// sizeX for glTexImage2D() in videoGL.h
					   TEXTURE_SIZE_128,	// sizeY for glTexImage2D() in videoGL.h
					   //GL_TEXTURE_WRAP_S|GL_TEXTURE_WRAP_T|TEXGEN_OFF|GL_TEXTURE_COLOR0_TRANSPARENT,
					   GL_TEXTURE_WRAP_S|GL_TEXTURE_WRAP_T|TEXGEN_OFF,
					   16,					// Length of the palette to use (16 colors)
					   (u16*)banditPal,		// Load our 256 color tiles palette
					   (u8*)banditBitmap // image data generated by GRIT
					 );


    }

    void draw()
    {
        glColor( RGB15(31,31,31) );
        glSprite( 100, 100, GL_FLIP_NONE, Bandit );
//        glSprite( 150, 50, GL_FLIP_NONE, Shuttle );

    }


    // Load a sprite and add it to the manager
    void loadSprite(u16* image) {
        sprites.push_back(Sprite(image));
    }

    void drawSprite(Sprites sprite, 
                    int x, 
                    int y, 
                    u16 color, 
                    s32 scaleX, 
                    s32 scaleY, 
                    s32 rotation) 
    {
        glColor(color);
        glSpriteRotateScaleXY(x,y,rotation,scaleX,scaleY,
                              GL_FLIP_NONE,sprites[sprite].getImage());
    }

private:
    // Private constructor to prevent instantiation
    SpriteManager() {}

    std::vector<Sprite> sprites; // Container for sprites
};

#endif // SPRITEMANAGER_H 