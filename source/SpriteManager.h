#ifndef SPRITEMANAGER_H
#define SPRITEMANAGER_H

#include <nds.h>
#include <gl2d.h>
#include <vector>

#include "bandit.h"
static glImage  Bandit[1];
#include "client1.h"
static glImage  Client1[1];
#include "client2.h"
static glImage  Client2[1];
#include "hatguy.h"
static glImage  Hatguy[1];
#include "door_closed.h"
static glImage  DoorClosed[1];
#include "hat.h"
static glImage  Hat[1];
#include "warthreat.h"
static glImage  WarThreat[1];
#include "westbank.h"
static glImage  WestBank[1];

// enum of sprites
// these match the order of the sprites in the vector
// we will write a function that takes a sprite enum and draws the sprite
enum Sprites {
    ROBBER = 0,
    CLIENT_MALE = 1,
    CLIENT_FEMALE = 2,
    HATGUY = 3,
    DOOR_CLOSED = 4,
	HAT = 5,
	WARTHREAT_LOGO = 6,
	WESTBANK_LOGO = 7,
    ROBBER_DEAD = 8,
    CLIENT_MALE_DEAD = 9,
    CLIENT_FEMALE_DEAD = 10,
    HATGUY_DEAD = 11,
    DOOR_OPEN = 12,
    DOOR_HALF_OPEN = 13,
    GUNSHOT = 14,
    NUM_SPRITES = 15
};

class SpriteManager {
public:
    // Get the singleton instance
    static SpriteManager& getInstance() {
        static SpriteManager instance; // Guaranteed to be destroyed
        return instance;                // Instantiated on first use
    }


    void draw()
    {
        glColor( RGB15(31,31,31) );

        //glSprite( 100, 10, GL_FLIP_NONE, Client1 );

    }


    void drawSprite(Sprites sprite, 
                    int x, 
                    int y, 
                    u16 color = RGB15(31,31,31),
					bool scale = false,
                    s32 scaleX = 1 << 16, 
                    s32 scaleY = 1 << 16, 
                    s32 rotation = 0) 
    {
        glColor(color);
		if(scale) {
			glSpriteScaleXY(x,y, scaleX, scaleY, GL_FLIP_NONE, sprites[sprite]); 
		} else {
			glSprite(x,y,GL_FLIP_NONE,sprites[sprite]); 
		}
        //glSprite(x,y,GL_FLIP_NONE,sprites[sprite]); 
        //glSpriteRotateScaleXY(x,y,rotation,scaleX,scaleY,
        //                      GL_FLIP_NONE,sprites[sprite]);
    }


    void loadSprites() {
       
        //int BanditTextureID =
		glLoadTileSet( Bandit,			// pointer to glImage array
					   64,				// sprite width
					   128,				// sprite height
					   64,				// bitmap image width
					   128,				// bitmap image height
					   GL_RGB16,		// texture type for glTexImage2D() in videoGL.h
					   TEXTURE_SIZE_64,	// sizeX for glTexImage2D() in videoGL.h
					   TEXTURE_SIZE_128,	// sizeY for glTexImage2D() in videoGL.h
					   //GL_TEXTURE_WRAP_S|GL_TEXTURE_WRAP_T|TEXGEN_OFF|GL_TEXTURE_COLOR0_TRANSPARENT,
					   GL_TEXTURE_WRAP_S|GL_TEXTURE_WRAP_T|TEXGEN_OFF,
					   16,					// Length of the palette to use (16 colors)
					   (u16*)banditPal,		// Load our 256 color tiles palette
					   (u8*)banditBitmap // image data generated by GRIT
					 );

        glLoadTileSet( Client1,			// pointer to glImage array
					   64,				// sprite width
					   128,				// sprite height
					   64,				// bitmap image width
					   128,				// bitmap image height
					   GL_RGB16,		// texture type for glTexImage2D() in videoGL.h
					   TEXTURE_SIZE_64,	// sizeX for glTexImage2D() in videoGL.h
					   TEXTURE_SIZE_128,	// sizeY for glTexImage2D() in videoGL.h
					   //GL_TEXTURE_WRAP_S|GL_TEXTURE_WRAP_T|TEXGEN_OFF|GL_TEXTURE_COLOR0_TRANSPARENT,
					   GL_TEXTURE_WRAP_S|GL_TEXTURE_WRAP_T|TEXGEN_OFF,
					   16,					// Length of the palette to use (16 colors)
					   (u16*)client1Pal,		// Load our 256 color tiles palette
					   (u8*)client1Bitmap // image data generated by GRIT
					 );

        glLoadTileSet( Client2,			// pointer to glImage array
					   64,				// sprite width
					   128,				// sprite height
					   64,				// bitmap image width
					   128,				// bitmap image height
					   GL_RGB16,		// texture type for glTexImage2D() in videoGL.h
					   TEXTURE_SIZE_64,	// sizeX for glTexImage2D() in videoGL.h
					   TEXTURE_SIZE_128,	// sizeY for glTexImage2D() in videoGL.h
					   //GL_TEXTURE_WRAP_S|GL_TEXTURE_WRAP_T|TEXGEN_OFF|GL_TEXTURE_COLOR0_TRANSPARENT,
					   GL_TEXTURE_WRAP_S|GL_TEXTURE_WRAP_T|TEXGEN_OFF,
					   16,					// Length of the palette to use (16 colors)
					   (u16*)client2Pal,		// Load our 256 color tiles palette
					   (u8*)client2Bitmap // image data generated by GRIT
					 );

        glLoadTileSet( Hatguy,			// pointer to glImage array
					   64,				// sprite width
					   128,				// sprite height
					   64,				// bitmap image width
					   128,				// bitmap image height
					   GL_RGB16,		// texture type for glTexImage2D() in videoGL.h
					   TEXTURE_SIZE_64,	// sizeX for glTexImage2D() in videoGL.h
					   TEXTURE_SIZE_128,	// sizeY for glTexImage2D() in videoGL.h
					   //GL_TEXTURE_WRAP_S|GL_TEXTURE_WRAP_T|TEXGEN_OFF|GL_TEXTURE_COLOR0_TRANSPARENT,
					   GL_TEXTURE_WRAP_S|GL_TEXTURE_WRAP_T|TEXGEN_OFF,
					   16,					// Length of the palette to use (16 colors)
					   (u16*)hatguyPal,		// Load our 256 color tiles palette
					   (u8*)hatguyBitmap // image data generated by GRIT
					 );

        glLoadTileSet( DoorClosed,			// pointer to glImage array
					   64,				// sprite width
					   128,				// sprite height
					   64,				// bitmap image width
					   128,				// bitmap image height
					   GL_RGB16,		// texture type for glTexImage2D() in videoGL.h
					   TEXTURE_SIZE_64,	// sizeX for glTexImage2D() in videoGL.h
					   TEXTURE_SIZE_128,	// sizeY for glTexImage2D() in videoGL.h
					   //GL_TEXTURE_WRAP_S|GL_TEXTURE_WRAP_T|TEXGEN_OFF|GL_TEXTURE_COLOR0_TRANSPARENT,
					   GL_TEXTURE_WRAP_S|GL_TEXTURE_WRAP_T|TEXGEN_OFF,
					   16,					// Length of the palette to use (16 colors)
					   (u16*)door_closedPal,		// Load our 256 color tiles palette
					   (u8*)door_closedBitmap // image data generated by GRIT
					 );

        glLoadTileSet( Hat,			// pointer to glImage array
					   32,				// sprite width
					   16,				// sprite height
					   32,				// bitmap image width
					   16,				// bitmap image height
					   GL_RGB16,		// texture type for glTexImage2D() in videoGL.h
					   TEXTURE_SIZE_32,	// sizeX for glTexImage2D() in videoGL.h
					   TEXTURE_SIZE_16,	// sizeY for glTexImage2D() in videoGL.h
					   //GL_TEXTURE_WRAP_S|GL_TEXTURE_WRAP_T|TEXGEN_OFF|GL_TEXTURE_COLOR0_TRANSPARENT,
					   GL_TEXTURE_WRAP_S|GL_TEXTURE_WRAP_T|TEXGEN_OFF,
					   16,					// Length of the palette to use (16 colors)
					   (u16*)hatPal,		// Load our 256 color tiles palette
					   (u8*)hatBitmap // image data generated by GRIT
					 );

		glLoadTileSet( WarThreat,			// pointer to glImage array
					   128,				// sprite width
					   128,				// sprite height
					   128,				// bitmap image width
					   128,				// bitmap image height
					   GL_RGB16,		// texture type for glTexImage2D() in videoGL.h
					   TEXTURE_SIZE_128,	// sizeX for glTexImage2D() in videoGL.h
					   TEXTURE_SIZE_128,	// sizeY for glTexImage2D() in videoGL.h
					   //GL_TEXTURE_WRAP_S|GL_TEXTURE_WRAP_T|TEXGEN_OFF|GL_TEXTURE_COLOR0_TRANSPARENT,
					   GL_TEXTURE_WRAP_S|GL_TEXTURE_WRAP_T|TEXGEN_OFF,
					   16,					// Length of the palette to use (16 colors)
					   (u16*)warthreatPal,		// Load our 256 color tiles palette
					   (u8*)warthreatBitmap // image data generated by GRIT
					 );

		glLoadTileSet( WestBank,			// pointer to glImage array
					   256,				// sprite width
					   192,				// sprite height
					   256,				// bitmap image width
					   192,				// bitmap image height
					   GL_RGB16,		// texture type for glTexImage2D() in videoGL.h
					   TEXTURE_SIZE_256,	// sizeX for glTexImage2D() in videoGL.h
					   TEXTURE_SIZE_256,	// sizeY for glTexImage2D() in videoGL.h
					   //GL_TEXTURE_WRAP_S|GL_TEXTURE_WRAP_T|TEXGEN_OFF|GL_TEXTURE_COLOR0_TRANSPARENT,
					   GL_TEXTURE_WRAP_S|GL_TEXTURE_WRAP_T|TEXGEN_OFF,
					   16,					// Length of the palette to use (16 colors)
					   (u16*)westbankPal,		// Load our 256 color tiles palette
					   (u8*)westbankBitmap // image data generated by GRIT
					 );

        sprites.push_back(Bandit);
        sprites.push_back(Client1);
        sprites.push_back(Client2);
        sprites.push_back(Hatguy);
        sprites.push_back(DoorClosed);
        sprites.push_back(Hat);
		sprites.push_back(WarThreat);
		sprites.push_back(WestBank);
    }

private:
    // Private constructor to prevent instantiation
    SpriteManager() {}

    std::vector<glImage*> sprites; // Container for sprites
};

#endif // SPRITEMANAGER_H 